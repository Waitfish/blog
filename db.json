{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/AcFun.png","path":"img/AcFun.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/CSDN.png","path":"img/CSDN.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Coding.png","path":"img/Coding.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/LOFTER.png","path":"img/LOFTER.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Plunker.png","path":"img/Plunker.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/Quora.png","path":"img/Quora.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/bilibili.png","path":"img/bilibili.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/niconico.png","path":"img/niconico.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/博客园.png","path":"img/博客园.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/js/toc.js","path":"js/toc.js","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","path":"background/backup/bg-1.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","path":"background/backup/bg-2.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","path":"background/backup/bg-3.jpg","modified":1,"renderable":1},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","path":"background/backup/bg-4.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yelee/.gitignore","hash":"237760b38ce80bcc3a8b556566bef0295c145393","modified":1502704835000},{"_id":"themes/yelee/README.md","hash":"12bc9cdb68f51df81bcc36a5263e0a6c5860f646","modified":1502704835000},{"_id":"themes/yelee/_config.yml","hash":"622d1c761128b645e0316441fa7bf1160dee7d38","modified":1502704835000},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1502704836000},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1502704835000},{"_id":"themes/yelee/.git/config","hash":"900873b633dea689f1f85eb22fdcad2ff83c0a23","modified":1502704835000},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1502704329000},{"_id":"themes/yelee/.git/index","hash":"b02a4ccfcc5648d60467e5cdb2b7ddb5d03a0adb","modified":1502704836000},{"_id":"themes/yelee/.git/packed-refs","hash":"fad6a43ad617793304d9241562a71596db559018","modified":1502704835000},{"_id":"themes/yelee/.github/ISSUE_TEMPLATE.md","hash":"09e2580d457ce93b4d7d554b75618036b45f8717","modified":1502704835000},{"_id":"themes/yelee/languages/default.yml","hash":"80cc17267333753accc0b1c85a73678fedcbce76","modified":1502704835000},{"_id":"themes/yelee/languages/en.yml","hash":"2c096d06c0af4ddf9c128fc8f77fb276b59a47fb","modified":1502704835000},{"_id":"themes/yelee/languages/zh-Hant-HK.yml","hash":"c38a95f5076ad951839aaf7748295d7eea277c61","modified":1502704835000},{"_id":"themes/yelee/languages/zh-Hans.yml","hash":"b5b2d20cde04db3773962284a002d025b09134b0","modified":1502704835000},{"_id":"themes/yelee/languages/zh-Hant-TW.yml","hash":"f372cc0d758a7d8bbb885aa9756d607bec26469a","modified":1502704835000},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1502704836000},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1502704836000},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1502704836000},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1502704836000},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1502704836000},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1502704836000},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1502704836000},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1502704836000},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1502704329000},{"_id":"themes/yelee/.git/logs/HEAD","hash":"390fdf6a72c424292d857717f325d6be67b1ec7a","modified":1502704835000},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1502704329000},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1502704329000},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1502704329000},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"748391b89b661fa1ed7da0b15ed6870981ec4dc3","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"afd85b362d732fa9b439af7dc44b657d0d1aae3d","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"82653e3bbdc605b51e1b0a36e30f3ac1180c838e","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"55e90c3d5de6d7ffcfe26c4dc22189a7a27b6651","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/ie-updater.ejs","hash":"3e5f2e41bbb1a5b93a8a7a6cb9ccd191ced54408","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"90fd7c763faf8d64d58612f592cbacbefdaea161","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"ce868f8b2b5b377cadc270e3a5bb5826f8bf0dee","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"306be982577b0ef968f855d0dfeaab6b180b8a50","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/open-in-new-tab.ejs","hash":"a6046bc322ce9194faa9559c70e1618a7e1e4cbc","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"cfce60062cdb60893baeda7fa0266ae4086c2bc8","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"0a98bffdd14f6677721841c0ac4487a86c77266c","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"c5e1c3a8e1e6b0d927ac25a7fb8720ee7ac83ad8","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/tab-title-change.ejs","hash":"1bebab6eb7a849319cd48fe051f3c71b9349a723","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/tag-cloud-page.ejs","hash":"432ded02bcc1f0d52cd833e8eeac688ee886169a","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"7ee88b1a98eea5cbd44c0f9a11b86b46aa2d6752","modified":1502704836000},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1502704836000},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1502704836000},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1502704836000},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1502704836000},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1502704836000},{"_id":"themes/yelee/source/css/_variables.styl","hash":"f429eb9bc9f0a270ec68c4f4c63903250746a01c","modified":1502704836000},{"_id":"themes/yelee/source/css/style.styl","hash":"b285f9a75abd09c7d06fe89e70f9e1819eac27dd","modified":1502704836000},{"_id":"themes/yelee/source/img/AcFun.png","hash":"df6b0fa39ced4dc988359fc7b7cd1e5403de08a6","modified":1502704836000},{"_id":"themes/yelee/source/img/CSDN.png","hash":"59f7d89eda8a7310a0ee1607e153c0829af7eb6e","modified":1502704836000},{"_id":"themes/yelee/source/img/Coding.png","hash":"afb4bce19bebf61e3c486fd5199369d6eb191b78","modified":1502704836000},{"_id":"themes/yelee/source/img/LOFTER.png","hash":"88670eaea8612839e9d6a40a3636e4231ab56c0f","modified":1502704836000},{"_id":"themes/yelee/source/img/Plunker.png","hash":"14a0054b9b4a0e459987f34b9ab48ab22dbe5cf9","modified":1502704836000},{"_id":"themes/yelee/source/img/Quora.png","hash":"1a624ade0d07f2482b21bef1e2a5ddd0110ba352","modified":1502704836000},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"1afbc7e575e2e9ed9404be84a3f92f7ca8345a9c","modified":1502704836000},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"b7f68f8f9c45561a9455aee0bfb80e35cae6f8df","modified":1502704836000},{"_id":"themes/yelee/source/img/V2EX.png","hash":"d0768de8555f9be0ee8ce956198cef454d4e4d7c","modified":1502704836000},{"_id":"themes/yelee/source/img/avatar.png","hash":"e4bca3d60087cd6e775d8e2aa2bf0d35e3859592","modified":1502704836000},{"_id":"themes/yelee/source/img/bilibili.png","hash":"be37b7e9a091c8547b8ee8b9d29583af8ded61c0","modified":1502704836000},{"_id":"themes/yelee/source/img/niconico.png","hash":"fabc7ca45e9ee5698db33a25de8b1f8a7c7d6723","modified":1502704836000},{"_id":"themes/yelee/source/img/博客园.png","hash":"5ff6f4c9f1fc1695217a57436d58b246d9d2f197","modified":1502704836000},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"af987032f2171867bb58b165d2180eb5dcbea637","modified":1502704836000},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"7a145ed1daee0c172cda77098f4254fc21f9eeee","modified":1502704836000},{"_id":"themes/yelee/source/img/知乎.png","hash":"ed6d3c304789e112d09f40784fa6add1f1a38bd6","modified":1502704836000},{"_id":"themes/yelee/source/img/简书.png","hash":"5c91ee83cab4abe160240e09de345b6935c8cb37","modified":1502704836000},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"4fd1275fd988584811cf710207eb077f2306f271","modified":1502704836000},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"a0039b049779b1f37c0b0b91760943b7bf25c8f1","modified":1502704836000},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"f1fc97f98612bcdf4a681542e5388483b40a5300","modified":1502704836000},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1502704836000},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1502704836000},{"_id":"themes/yelee/source/js/main.js","hash":"369774a7ff45a2e5117a796330a04aeb50a61fdf","modified":1502704836000},{"_id":"themes/yelee/source/js/mobile.js","hash":"8abc32d18f16db56f51caad607cffb6ca756eca9","modified":1502704836000},{"_id":"themes/yelee/source/js/pc.js","hash":"bc289c5dc610e2a34d308daeb9adea96d01f7788","modified":1502704836000},{"_id":"themes/yelee/source/js/search.js","hash":"b456aaab98bbc3b0906f8a16d1e6e4f74dfcffda","modified":1502704836000},{"_id":"themes/yelee/source/js/toc.js","hash":"72ba1228fc1a44df45b8f4b562eba78594f13016","modified":1502704836000},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1502704836000},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1502704836000},{"_id":"themes/yelee/.git/refs/heads/master","hash":"a098c9ba7d644627d0ba7fb675f0168faedeb258","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/comments/click2show.ejs","hash":"678f3aec2980d378ea44be60eec3eb504c8ba668","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/comments/count-comment.ejs","hash":"d3c1b0b31db9d80e857f3054d010ea49c0f88134","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"df7ee469b648b12b5ee3104ef513d54cbb7418af","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"e7f12f1246a67a5b556c2d5b37dc78733f1cf15a","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"bcf2070587645afd20a4eb046b9c8bb9c44d1cf5","modified":1502704835000},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"329ed372296a86bce73ff8936af5601723fdd70a","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"6f531dbc9cc7ae42d2486d6707f826cfe7d9d8bc","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"58c2db54a9867aaafe68a7f052b04701c7c3df0f","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1502704836000},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1502704836000},{"_id":"source/_posts/django-001.md","hash":"28b1800ac428441f7abb851386ee0b6ac0f55dec","modified":1502702334000},{"_id":"source/_posts/comback.md","hash":"367b638040cd56731c8b9291309e5fe81f1ad3d2","modified":1502703377000},{"_id":"source/_posts/django-002.md","hash":"ea4c2f033a82f44319222e08ff1d094e2f8ff132","modified":1502702334000},{"_id":"source/_posts/django-rest.md","hash":"d86cc382b0f49107d19552901688f86743cd2a0b","modified":1502702334000},{"_id":"source/_posts/rest-viewset.md","hash":"9199bff1b7bfdf3ddba0e9da656bfa85fec885f6","modified":1502702334000},{"_id":"source/_posts/setting-of-django.md","hash":"0b07a5b53b0946e603a4264a5ee5dfec861908bd","modified":1502702334000},{"_id":"source/about/index.md","hash":"c854cf2154e8a4531103ad9e1316534eec0db7cb","modified":1502702334000},{"_id":"source/_posts/todo.md","hash":"3e85f46f4ccc1e915f329d4378f01d0ed59cbfd6","modified":1502702334000},{"_id":"source/tags/index.md","hash":"6efbd97cf5c2818f3c22bb1be56c5c7ade48f825","modified":1502702334000},{"_id":"themes/yelee/source/background/backup/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1502704836000},{"_id":"themes/yelee/source/background/backup/bg-2.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1502704836000},{"_id":"themes/yelee/source/background/backup/bg-3.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1502704836000},{"_id":"themes/yelee/source/background/backup/bg-4.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"102c23dbb6cde3cbfca3b151c742e0d77911186e","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"190828c822096bb3098a7d14c3340eb004057aa0","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"a419108f1b820c59fcc56d218bfaaa4ffc4f1d4d","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"4e34bf9340ce9b15d2d59fc4ea761d1d110927cf","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"405db411896f3c7de9e7dd27e58c920fb90b9834","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"39db458d4e9f6973afc1390b4d3fc0291fff4c40","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"dfb20f2515a26d75e42fe09741e91cc889426b11","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/search.styl","hash":"fcaa5deaa654aaec69e267e23b49df07f84f633a","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"88c1277397b71eb1f3473a94d9542314f983cd09","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"b38b275728bfe11809defe1077b03cb423c3c92f","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/toc.styl","hash":"eb19bbd37fc2c1abd238e2ed96b22cb1aae41ab7","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1502704836000},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1502704836000},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1502704836000},{"_id":"themes/yelee/.git/objects/pack/pack-77a4620cd5484f9cebd20a0e2d3b217c4eafaa00.idx","hash":"553e716d281328dd65d319084555af89dd6daf78","modified":1502704835000},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"390fdf6a72c424292d857717f325d6be67b1ec7a","modified":1502704835000},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1502704835000},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5e6edb9ad49288743ed550a2bd8c9a3c8e208455","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"b58262a9f8903e75df431291745e19ccd8ff243a","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/customise/heading.styl","hash":"f309241c1daa9b6c04aa04063307537c219fdd59","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"a15292b2b3541ea022c0fb7441875192dee5ad9d","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/customise/list.styl","hash":"b1e564ed76d6e892556b61b4278270fc9eeea961","modified":1502704836000},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"bfa5c863d474266f32a570e34a0effda964f7f40","modified":1502704836000},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"390fdf6a72c424292d857717f325d6be67b1ec7a","modified":1502704835000},{"_id":"themes/yelee/.git/objects/pack/pack-77a4620cd5484f9cebd20a0e2d3b217c4eafaa00.pack","hash":"a3ed1c6017919a7a0bdf6a687016b7fe3ac56b1e","modified":1502704835000}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-01-20T06:58:58.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-01-20 14:58:58\n---\n","updated":"2017-08-14T09:18:54.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj6bzqyea0001853e20qp0rb3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-01-20T06:58:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-01-20 14:58:27\n---\n","updated":"2017-08-14T09:18:54.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj6bzqyed0003853e9c8hua9m","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"django 学习(1)","date":"2017-01-13T02:16:30.000Z","_content":"# 开始\n\n## 数据库配置\n- setting.py 文件中设置\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME':'moocdai',\n        'USER':'django',\n        'PASSWORD':'xxxxx',\n        'HOST':'10.10.10.3',\n    }\n```\n- 在 ubuntu 中安装mysql支持\n```\nsudo apt-get install libmysqlclient-dev\npip install MySQL-python\n```\n\n## 让系统使用我们重载的 userprofile 类\nsetting.py 中设置\n```\nfrom users.models import UserProfile\nAUTH_USER_MODEL=\"users.UserProfile\"\n```\n\n## 在modeles中使用imagefield的话,就要安装pillow\n`pip install pillow`\n## 如果要用xadmin,现在要用django1.9需要再安装 django-reversion\n\n## django migrate 出错的处理\n\n如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个__init__.py 文件\n然后重新 makemigrationgs  migrate\n","source":"_posts/django-001.md","raw":"---\ntitle: django 学习(1)\ndate: 2017-01-13 10:16:30\ntags:\n- python\n- django\n---\n# 开始\n\n## 数据库配置\n- setting.py 文件中设置\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME':'moocdai',\n        'USER':'django',\n        'PASSWORD':'xxxxx',\n        'HOST':'10.10.10.3',\n    }\n```\n- 在 ubuntu 中安装mysql支持\n```\nsudo apt-get install libmysqlclient-dev\npip install MySQL-python\n```\n\n## 让系统使用我们重载的 userprofile 类\nsetting.py 中设置\n```\nfrom users.models import UserProfile\nAUTH_USER_MODEL=\"users.UserProfile\"\n```\n\n## 在modeles中使用imagefield的话,就要安装pillow\n`pip install pillow`\n## 如果要用xadmin,现在要用django1.9需要再安装 django-reversion\n\n## django migrate 出错的处理\n\n如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个__init__.py 文件\n然后重新 makemigrationgs  migrate\n","slug":"django-001","published":1,"updated":"2017-08-14T09:18:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6bzqye70000853e8adr0qlh","content":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h2><ul>\n<li><p>setting.py 文件中设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">DATABASES = &#123;</div><div class=\"line\">    &apos;default&apos;: &#123;</div><div class=\"line\">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class=\"line\">        &apos;NAME&apos;:&apos;moocdai&apos;,</div><div class=\"line\">        &apos;USER&apos;:&apos;django&apos;,</div><div class=\"line\">        &apos;PASSWORD&apos;:&apos;xxxxx&apos;,</div><div class=\"line\">        &apos;HOST&apos;:&apos;10.10.10.3&apos;,</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 ubuntu 中安装mysql支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libmysqlclient-dev</div><div class=\"line\">pip install MySQL-python</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"让系统使用我们重载的-userprofile-类\"><a href=\"#让系统使用我们重载的-userprofile-类\" class=\"headerlink\" title=\"让系统使用我们重载的 userprofile 类\"></a>让系统使用我们重载的 userprofile 类</h2><p>setting.py 中设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">from users.models import UserProfile</div><div class=\"line\">AUTH_USER_MODEL=&quot;users.UserProfile&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"在modeles中使用imagefield的话-就要安装pillow\"><a href=\"#在modeles中使用imagefield的话-就要安装pillow\" class=\"headerlink\" title=\"在modeles中使用imagefield的话,就要安装pillow\"></a>在modeles中使用imagefield的话,就要安装pillow</h2><p><code>pip install pillow</code></p>\n<h2 id=\"如果要用xadmin-现在要用django1-9需要再安装-django-reversion\"><a href=\"#如果要用xadmin-现在要用django1-9需要再安装-django-reversion\" class=\"headerlink\" title=\"如果要用xadmin,现在要用django1.9需要再安装 django-reversion\"></a>如果要用xadmin,现在要用django1.9需要再安装 django-reversion</h2><h2 id=\"django-migrate-出错的处理\"><a href=\"#django-migrate-出错的处理\" class=\"headerlink\" title=\"django migrate 出错的处理\"></a>django migrate 出错的处理</h2><p>如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个<strong>init</strong>.py 文件<br>然后重新 makemigrationgs  migrate</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"数据库配置\"><a href=\"#数据库配置\" class=\"headerlink\" title=\"数据库配置\"></a>数据库配置</h2><ul>\n<li><p>setting.py 文件中设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">DATABASES = &#123;</div><div class=\"line\">    &apos;default&apos;: &#123;</div><div class=\"line\">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class=\"line\">        &apos;NAME&apos;:&apos;moocdai&apos;,</div><div class=\"line\">        &apos;USER&apos;:&apos;django&apos;,</div><div class=\"line\">        &apos;PASSWORD&apos;:&apos;xxxxx&apos;,</div><div class=\"line\">        &apos;HOST&apos;:&apos;10.10.10.3&apos;,</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 ubuntu 中安装mysql支持</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libmysqlclient-dev</div><div class=\"line\">pip install MySQL-python</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"让系统使用我们重载的-userprofile-类\"><a href=\"#让系统使用我们重载的-userprofile-类\" class=\"headerlink\" title=\"让系统使用我们重载的 userprofile 类\"></a>让系统使用我们重载的 userprofile 类</h2><p>setting.py 中设置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">from users.models import UserProfile</div><div class=\"line\">AUTH_USER_MODEL=&quot;users.UserProfile&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"在modeles中使用imagefield的话-就要安装pillow\"><a href=\"#在modeles中使用imagefield的话-就要安装pillow\" class=\"headerlink\" title=\"在modeles中使用imagefield的话,就要安装pillow\"></a>在modeles中使用imagefield的话,就要安装pillow</h2><p><code>pip install pillow</code></p>\n<h2 id=\"如果要用xadmin-现在要用django1-9需要再安装-django-reversion\"><a href=\"#如果要用xadmin-现在要用django1-9需要再安装-django-reversion\" class=\"headerlink\" title=\"如果要用xadmin,现在要用django1.9需要再安装 django-reversion\"></a>如果要用xadmin,现在要用django1.9需要再安装 django-reversion</h2><h2 id=\"django-migrate-出错的处理\"><a href=\"#django-migrate-出错的处理\" class=\"headerlink\" title=\"django migrate 出错的处理\"></a>django migrate 出错的处理</h2><p>如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个<strong>init</strong>.py 文件<br>然后重新 makemigrationgs  migrate</p>\n"},{"title":"comback","date":"2017-08-14T09:35:46.000Z","_content":"\n哈哈 又找回来了\n","source":"_posts/comback.md","raw":"---\ntitle: comback\ndate: 2017-08-14 17:35:46\ntags:\n---\n\n哈哈 又找回来了\n","slug":"comback","published":1,"updated":"2017-08-14T09:36:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6bzqyeb0002853esustwi29","content":"<p>哈哈 又找回来了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>哈哈 又找回来了</p>\n"},{"title":"django migrate 出错的处理","date":"2017-01-13T06:31:01.000Z","_content":"# django migrate 出错的处理\n\n如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个__init__.py 文件\n然后重新 makemigrationgs  migrate\n","source":"_posts/django-002.md","raw":"---\ntitle: django migrate 出错的处理\ndate: 2017-01-13 14:31:01\ntags:\n- django\n- python\n---\n# django migrate 出错的处理\n\n如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个__init__.py 文件\n然后重新 makemigrationgs  migrate\n","slug":"django-002","published":1,"updated":"2017-08-14T09:18:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6bzqyeh0005853e7rdzcnmo","content":"<h1 id=\"django-migrate-出错的处理\"><a href=\"#django-migrate-出错的处理\" class=\"headerlink\" title=\"django migrate 出错的处理\"></a>django migrate 出错的处理</h1><p>如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个<strong>init</strong>.py 文件<br>然后重新 makemigrationgs  migrate</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"django-migrate-出错的处理\"><a href=\"#django-migrate-出错的处理\" class=\"headerlink\" title=\"django migrate 出错的处理\"></a>django migrate 出错的处理</h1><p>如果不小心,数据库的一些逻辑没处理好,就容易出现migrate给你报一大堆错误.最暴力的解决办法就是删除migrate文件夹下面的所有文件,然后新建一个<strong>init</strong>.py 文件<br>然后重新 makemigrationgs  migrate</p>\n"},{"title":"django-restful 框架学习","date":"2017-01-20T00:53:59.000Z","_content":"\n\n# Serialization 序列化\n创建专门的序列化的 class 可以帮助 model 序列化\n```python\nclass SnippetSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Snippet\n        fields = ('id', 'title', 'code', 'linenos', 'language', 'style')\n```\n也可以自己创建序列化的函数,但是官方提供了modelserializer供我们继承\n\n\n# request,response 对象\nrest 框架重新封装了这2个对象.\n\n## request\n`request.post`可以得到客户端 post 的数据\n`request.data`则可以处理 post\\put\\patch 等方法的数据(推荐使用data)\n\n## response\n`response`  对象是 `TemplateResponse`类型,它可以根据内容来决定返回给客户端的数据格式(比如:html 或者json)\n\n```python\nfrom format_suftrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n        url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail),\n        ]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n当客户端是浏览器的时候,就返回html代码,默认返回该格式\n当客户端指定`endpoint`的时候就返回相应的格式.\n`http://127.0.0.1/user.json` 就返回 json\n`http://127.0.0.1/user.api` 就返回 html\n客户端也可以在 `httpheader` 里面指定`accept`内容,比如`appication/json` `text/html`\n\n<!-- more -->\n# 使用 classview\n和`django`一样,这个框架也有封装好的`classview`,具体的方法如下:\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom django.http import Http404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n\nclass SnippetList(APIView):\n    \"\"\n    List all snippets, or create a new snippet.\n    \"\"\n    def get(self, request, format=None):\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    def post(self, request, format=None):\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\"\n```\n## 还有高级的混合类\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import mixins\nfrom rest_framework import generics\n\nclass SnippetList(mixins.ListModelMixin,\n    mixins.CreateModelMixin,\n    generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\n```\n抽象了常见的`list\\create`等方法\n\n## 最高级的classbase类\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\n\n\nclass SnippetList(generics.ListCreateAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n```\n使用这个高级的`view`类,两行代码就完成了 `get\\put\\delete`方法,全都浓缩了.\n\n## 使用基于类的 url 配置\n```python\nfrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.SnippetList.as_view()),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view()),\n        ]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n# 认证和权限控制\n## 对`model`进行权限控制的时候,需要在`model`加上`django`的用户外键\n\n```python\nowner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE)\n```\n外键也需要提供默认值,键值是用户`id`\n```python\nowner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE,defaut=key)\n```\n访问用户的时候可以看到属于用户的对象信息需要\n添加用户的序列号文件\n\n```python\nfrom django.contrib.auth.models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all())\n\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'snippets')\n```\n\n## 关联用户和模块 perform_create\n\n在对应的`model`的`view`类中,添加`perform_create`方法\n```python\ndef perform_create(self, serializer):\n    serializer.save(owner=self.request.user)\n```\n\n## 在model的序列化类中添加 用户的信息\n\n```python\nowner = serializers.ReadOnlyField(source='owner.username')\n```\n`source`可以指定需要输出的属性\n\n## 基本的权限控制\n\n从框架中导入默认的权限控制\n```python\nfrom rest_framework import permissions\n```\n在对应的view中添加该属性即可实现基本的权限控制\n```python\npermission_classes = (permissions.IsAuthenticatedOrReadOnly,)\n```\n\n## 定制的权限控制\n可以自建一个权限控制的文件,用来控制\n```python\nfrom rest_framework import permissions\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\n    Custom permission to only allow owners of an object to edit it.\n    \"\"\n\n    def has_object_permission(self, request, view, obj):\n        \"\"\n        Read permissions are allowed to any request,\n        so we'll always allow GET, HEAD or OPTIONS requests.\n        \"\"\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        return obj.owner == request.user`\n```\n```python\npermission_classes = (permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly,)\n```\n# 给api加上超级链接\n## 修改模块的序列化类\n\n在序列化的类上继承 `HyperlinkedModelSerializer`,并使用`HyperlinkedRelatedField`\n\n```python\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True)\n\n    class Meta:\n        model = User\n        fields = ('url', 'id', 'username', 'snippets')\n```\n__需要在 url 配置中添加 name 属性__\n\n## 列表页面的分页配置\n在项目的`setting.py`文件中添加下面的属性\n```python\nREST_FRAMEWORK = {\n        'PAGE_SIZE': 10\n        }\n```\n# viewset 和 router\n## 终极抽象 view 类,viewset\n和单独的 `view` 不同的是,`viewset`抽象了一般的`list`和`detail`方法(list\\create\\retrieve\\update\\destroy)\n\n```python\nfrom rest_framework.decorators import detail_route\n\nclass SnippetViewSet(viewsets.ModelViewSet):\n    \"\"\n    This viewset automatically provides `list`, `create`, `retrieve`,\n    `update` and `destroy` actions.\n\n    Additionally we also provide an extra `highlight` action.\n    \"\"\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    permission_classes = (permissions.IsAuthenticatedOrReadOnly,\n    IsOwnerOrReadOnly,)\n\n    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])\n    def highlight(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)\n\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)\"\n```\n\n## 抽象的 router\n\n\n```python\nfrom django.conf.urls import url, include\nfrom snippets import views\nfrom rest_framework.routers import DefaultRouter\n\n# Create a router and register our viewsets with it.\nrouter = DefaultRouter()\nrouter.register(r'snippets', views.SnippetViewSet)\nrouter.register(r'users', views.UserViewSet)\n\n# The API URLs are now determined automatically by the router.\n# Additionally, we include the login URLs for the browsable API.\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n        ]\n```\n# 添加 schema\n安装`coreapi`\n`pip install coreapi`\n```python\nfrom rest_framework.schemas import get_schema_view\n\nschema_view = get_schema_view(title='Pastebin API')\n\nurlpatterns = [\n    url('^schema/$', schema_view),\n        ...\n        ]\n```\n# 官方示例项目地址\ngithub:https://github.com/tomchristie/rest-framework-tutorial\n\ndemo  :http://restframework.herokuapp.com/snippets/\n","source":"_posts/django-rest.md","raw":"---\ntitle: 'django-restful 框架学习'\ndate: 2017-01-20 08:53:59\ntags:\n- django\n- restful\n- python\n---\n\n\n# Serialization 序列化\n创建专门的序列化的 class 可以帮助 model 序列化\n```python\nclass SnippetSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Snippet\n        fields = ('id', 'title', 'code', 'linenos', 'language', 'style')\n```\n也可以自己创建序列化的函数,但是官方提供了modelserializer供我们继承\n\n\n# request,response 对象\nrest 框架重新封装了这2个对象.\n\n## request\n`request.post`可以得到客户端 post 的数据\n`request.data`则可以处理 post\\put\\patch 等方法的数据(推荐使用data)\n\n## response\n`response`  对象是 `TemplateResponse`类型,它可以根据内容来决定返回给客户端的数据格式(比如:html 或者json)\n\n```python\nfrom format_suftrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.snippet_list),\n        url(r'^snippets/(?P<pk>[0-9]+)$', views.snippet_detail),\n        ]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n当客户端是浏览器的时候,就返回html代码,默认返回该格式\n当客户端指定`endpoint`的时候就返回相应的格式.\n`http://127.0.0.1/user.json` 就返回 json\n`http://127.0.0.1/user.api` 就返回 html\n客户端也可以在 `httpheader` 里面指定`accept`内容,比如`appication/json` `text/html`\n\n<!-- more -->\n# 使用 classview\n和`django`一样,这个框架也有封装好的`classview`,具体的方法如下:\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom django.http import Http404\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\nfrom rest_framework import status\n\n\nclass SnippetList(APIView):\n    \"\"\n    List all snippets, or create a new snippet.\n    \"\"\n    def get(self, request, format=None):\n        snippets = Snippet.objects.all()\n        serializer = SnippetSerializer(snippets, many=True)\n        return Response(serializer.data)\n\n    def post(self, request, format=None):\n        serializer = SnippetSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\"\n```\n## 还有高级的混合类\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import mixins\nfrom rest_framework import generics\n\nclass SnippetList(mixins.ListModelMixin,\n    mixins.CreateModelMixin,\n    generics.GenericAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n    def get(self, request, *args, **kwargs):\n        return self.list(request, *args, **kwargs)\n\n    def post(self, request, *args, **kwargs):\n        return self.create(request, *args, **kwargs)\n```\n抽象了常见的`list\\create`等方法\n\n## 最高级的classbase类\n```python\nfrom snippets.models import Snippet\nfrom snippets.serializers import SnippetSerializer\nfrom rest_framework import generics\n\n\nclass SnippetList(generics.ListCreateAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n\n\nclass SnippetDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n```\n使用这个高级的`view`类,两行代码就完成了 `get\\put\\delete`方法,全都浓缩了.\n\n## 使用基于类的 url 配置\n```python\nfrom django.conf.urls import url\nfrom rest_framework.urlpatterns import format_suffix_patterns\nfrom snippets import views\n\nurlpatterns = [\n    url(r'^snippets/$', views.SnippetList.as_view()),\n    url(r'^snippets/(?P<pk>[0-9]+)/$', views.SnippetDetail.as_view()),\n        ]\n\nurlpatterns = format_suffix_patterns(urlpatterns)\n```\n# 认证和权限控制\n## 对`model`进行权限控制的时候,需要在`model`加上`django`的用户外键\n\n```python\nowner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE)\n```\n外键也需要提供默认值,键值是用户`id`\n```python\nowner = models.ForeignKey('auth.User', related_name='snippets', on_delete=models.CASCADE,defaut=key)\n```\n访问用户的时候可以看到属于用户的对象信息需要\n添加用户的序列号文件\n\n```python\nfrom django.contrib.auth.models import User\n\nclass UserSerializer(serializers.ModelSerializer):\n    snippets = serializers.PrimaryKeyRelatedField(many=True, queryset=Snippet.objects.all())\n\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'snippets')\n```\n\n## 关联用户和模块 perform_create\n\n在对应的`model`的`view`类中,添加`perform_create`方法\n```python\ndef perform_create(self, serializer):\n    serializer.save(owner=self.request.user)\n```\n\n## 在model的序列化类中添加 用户的信息\n\n```python\nowner = serializers.ReadOnlyField(source='owner.username')\n```\n`source`可以指定需要输出的属性\n\n## 基本的权限控制\n\n从框架中导入默认的权限控制\n```python\nfrom rest_framework import permissions\n```\n在对应的view中添加该属性即可实现基本的权限控制\n```python\npermission_classes = (permissions.IsAuthenticatedOrReadOnly,)\n```\n\n## 定制的权限控制\n可以自建一个权限控制的文件,用来控制\n```python\nfrom rest_framework import permissions\n\n\nclass IsOwnerOrReadOnly(permissions.BasePermission):\n    \"\"\n    Custom permission to only allow owners of an object to edit it.\n    \"\"\n\n    def has_object_permission(self, request, view, obj):\n        \"\"\n        Read permissions are allowed to any request,\n        so we'll always allow GET, HEAD or OPTIONS requests.\n        \"\"\n        if request.method in permissions.SAFE_METHODS:\n            return True\n\n        return obj.owner == request.user`\n```\n```python\npermission_classes = (permissions.IsAuthenticatedOrReadOnly,\n                      IsOwnerOrReadOnly,)\n```\n# 给api加上超级链接\n## 修改模块的序列化类\n\n在序列化的类上继承 `HyperlinkedModelSerializer`,并使用`HyperlinkedRelatedField`\n\n```python\nclass UserSerializer(serializers.HyperlinkedModelSerializer):\n    snippets = serializers.HyperlinkedRelatedField(many=True, view_name='snippet-detail', read_only=True)\n\n    class Meta:\n        model = User\n        fields = ('url', 'id', 'username', 'snippets')\n```\n__需要在 url 配置中添加 name 属性__\n\n## 列表页面的分页配置\n在项目的`setting.py`文件中添加下面的属性\n```python\nREST_FRAMEWORK = {\n        'PAGE_SIZE': 10\n        }\n```\n# viewset 和 router\n## 终极抽象 view 类,viewset\n和单独的 `view` 不同的是,`viewset`抽象了一般的`list`和`detail`方法(list\\create\\retrieve\\update\\destroy)\n\n```python\nfrom rest_framework.decorators import detail_route\n\nclass SnippetViewSet(viewsets.ModelViewSet):\n    \"\"\n    This viewset automatically provides `list`, `create`, `retrieve`,\n    `update` and `destroy` actions.\n\n    Additionally we also provide an extra `highlight` action.\n    \"\"\n    queryset = Snippet.objects.all()\n    serializer_class = SnippetSerializer\n    permission_classes = (permissions.IsAuthenticatedOrReadOnly,\n    IsOwnerOrReadOnly,)\n\n    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])\n    def highlight(self, request, *args, **kwargs):\n        snippet = self.get_object()\n        return Response(snippet.highlighted)\n\n    def perform_create(self, serializer):\n        serializer.save(owner=self.request.user)\"\n```\n\n## 抽象的 router\n\n\n```python\nfrom django.conf.urls import url, include\nfrom snippets import views\nfrom rest_framework.routers import DefaultRouter\n\n# Create a router and register our viewsets with it.\nrouter = DefaultRouter()\nrouter.register(r'snippets', views.SnippetViewSet)\nrouter.register(r'users', views.UserViewSet)\n\n# The API URLs are now determined automatically by the router.\n# Additionally, we include the login URLs for the browsable API.\nurlpatterns = [\n    url(r'^', include(router.urls)),\n    url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))\n        ]\n```\n# 添加 schema\n安装`coreapi`\n`pip install coreapi`\n```python\nfrom rest_framework.schemas import get_schema_view\n\nschema_view = get_schema_view(title='Pastebin API')\n\nurlpatterns = [\n    url('^schema/$', schema_view),\n        ...\n        ]\n```\n# 官方示例项目地址\ngithub:https://github.com/tomchristie/rest-framework-tutorial\n\ndemo  :http://restframework.herokuapp.com/snippets/\n","slug":"django-rest","published":1,"updated":"2017-08-14T09:18:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6bzqyei0006853emcpaqaa8","content":"<h1 id=\"Serialization-序列化\"><a href=\"#Serialization-序列化\" class=\"headerlink\" title=\"Serialization 序列化\"></a>Serialization 序列化</h1><p>创建专门的序列化的 class 可以帮助 model 序列化<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Snippet</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'title'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'linenos'</span>, <span class=\"string\">'language'</span>, <span class=\"string\">'style'</span>)</div></pre></td></tr></table></figure></p>\n<p>也可以自己创建序列化的函数,但是官方提供了modelserializer供我们继承</p>\n<h1 id=\"request-response-对象\"><a href=\"#request-response-对象\" class=\"headerlink\" title=\"request,response 对象\"></a>request,response 对象</h1><p>rest 框架重新封装了这2个对象.</p>\n<h2 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request\"></a>request</h2><p><code>request.post</code>可以得到客户端 post 的数据<br><code>request.data</code>则可以处理 post\\put\\patch 等方法的数据(推荐使用data)</p>\n<h2 id=\"response\"><a href=\"#response\" class=\"headerlink\" title=\"response\"></a>response</h2><p><code>response</code>  对象是 <code>TemplateResponse</code>类型,它可以根据内容来决定返回给客户端的数据格式(比如:html 或者json)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> format_suftrom django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.snippet_list),</div><div class=\"line\">        url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)$'</span>, views.snippet_detail),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<p>当客户端是浏览器的时候,就返回html代码,默认返回该格式<br>当客户端指定<code>endpoint</code>的时候就返回相应的格式.<br><code>http://127.0.0.1/user.json</code> 就返回 json<br><code>http://127.0.0.1/user.api</code> 就返回 html<br>客户端也可以在 <code>httpheader</code> 里面指定<code>accept</code>内容,比如<code>appication/json</code> <code>text/html</code></p>\n<a id=\"more\"></a>\n<h1 id=\"使用-classview\"><a href=\"#使用-classview\" class=\"headerlink\" title=\"使用 classview\"></a>使用 classview</h1><p>和<code>django</code>一样,这个框架也有封装好的<code>classview</code>,具体的方法如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> Http404</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetList</span><span class=\"params\">(APIView)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    List all snippets, <span class=\"keyword\">or</span> create a new snippet.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></div><div class=\"line\">        snippets = Snippet.objects.all()</div><div class=\"line\">        serializer = SnippetSerializer(snippets, many=<span class=\"keyword\">True</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, format=None)</span>:</span></div><div class=\"line\">        serializer = SnippetSerializer(data=request.data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)<span class=\"string\">\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"还有高级的混合类\"><a href=\"#还有高级的混合类\" class=\"headerlink\" title=\"还有高级的混合类\"></a>还有高级的混合类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> mixins</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> generics</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetList</span><span class=\"params\">(mixins.ListModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    mixins.CreateModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    generics.GenericAPIView)</span>:</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.list(request, *args, **kwargs)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.create(request, *args, **kwargs)</div></pre></td></tr></table></figure>\n<p>抽象了常见的<code>list\\create</code>等方法</p>\n<h2 id=\"最高级的classbase类\"><a href=\"#最高级的classbase类\" class=\"headerlink\" title=\"最高级的classbase类\"></a>最高级的classbase类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> generics</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetList</span><span class=\"params\">(generics.ListCreateAPIView)</span>:</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetDetail</span><span class=\"params\">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div></pre></td></tr></table></figure>\n<p>使用这个高级的<code>view</code>类,两行代码就完成了 <code>get\\put\\delete</code>方法,全都浓缩了.</p>\n<h2 id=\"使用基于类的-url-配置\"><a href=\"#使用基于类的-url-配置\" class=\"headerlink\" title=\"使用基于类的 url 配置\"></a>使用基于类的 url 配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.SnippetList.as_view()),</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)/$'</span>, views.SnippetDetail.as_view()),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<h1 id=\"认证和权限控制\"><a href=\"#认证和权限控制\" class=\"headerlink\" title=\"认证和权限控制\"></a>认证和权限控制</h1><h2 id=\"对model进行权限控制的时候-需要在model加上django的用户外键\"><a href=\"#对model进行权限控制的时候-需要在model加上django的用户外键\" class=\"headerlink\" title=\"对model进行权限控制的时候,需要在model加上django的用户外键\"></a>对<code>model</code>进行权限控制的时候,需要在<code>model</code>加上<code>django</code>的用户外键</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">owner = models.ForeignKey(<span class=\"string\">'auth.User'</span>, related_name=<span class=\"string\">'snippets'</span>, on_delete=models.CASCADE)</div></pre></td></tr></table></figure>\n<p>外键也需要提供默认值,键值是用户<code>id</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">owner = models.ForeignKey(<span class=\"string\">'auth.User'</span>, related_name=<span class=\"string\">'snippets'</span>, on_delete=models.CASCADE,defaut=key)</div></pre></td></tr></table></figure></p>\n<p>访问用户的时候可以看到属于用户的对象信息需要<br>添加用户的序列号文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    snippets = serializers.PrimaryKeyRelatedField(many=<span class=\"keyword\">True</span>, queryset=Snippet.objects.all())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'snippets'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"关联用户和模块-perform-create\"><a href=\"#关联用户和模块-perform-create\" class=\"headerlink\" title=\"关联用户和模块 perform_create\"></a>关联用户和模块 perform_create</h2><p>在对应的<code>model</code>的<code>view</code>类中,添加<code>perform_create</code>方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">perform_create</span><span class=\"params\">(self, serializer)</span>:</span></div><div class=\"line\">    serializer.save(owner=self.request.user)</div></pre></td></tr></table></figure></p>\n<h2 id=\"在model的序列化类中添加-用户的信息\"><a href=\"#在model的序列化类中添加-用户的信息\" class=\"headerlink\" title=\"在model的序列化类中添加 用户的信息\"></a>在model的序列化类中添加 用户的信息</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">owner = serializers.ReadOnlyField(source=<span class=\"string\">'owner.username'</span>)</div></pre></td></tr></table></figure>\n<p><code>source</code>可以指定需要输出的属性</p>\n<h2 id=\"基本的权限控制\"><a href=\"#基本的权限控制\" class=\"headerlink\" title=\"基本的权限控制\"></a>基本的权限控制</h2><p>从框架中导入默认的权限控制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> permissions</div></pre></td></tr></table></figure></p>\n<p>在对应的view中添加该属性即可实现基本的权限控制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</div></pre></td></tr></table></figure></p>\n<h2 id=\"定制的权限控制\"><a href=\"#定制的权限控制\" class=\"headerlink\" title=\"定制的权限控制\"></a>定制的权限控制</h2><p>可以自建一个权限控制的文件,用来控制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> permissions</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IsOwnerOrReadOnly</span><span class=\"params\">(permissions.BasePermission)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    Custom permission to only allow owners of an object to edit it.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_object_permission</span><span class=\"params\">(self, request, view, obj)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"</span></div><div class=\"line\">        Read permissions are allowed to any request,</div><div class=\"line\">        so we<span class=\"string\">'ll always allow GET, HEAD or OPTIONS requests.</span></div><div class=\"line\"><span class=\"string\">        \"\"</span></div><div class=\"line\"><span class=\"string\">        if request.method in permissions.SAFE_METHODS:</span></div><div class=\"line\"><span class=\"string\">            return True</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">        return obj.owner == request.user`</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">permission_classes = (permissions.IsAuthenticatedOrReadOnly,</div><div class=\"line\">                      IsOwnerOrReadOnly,)</div></pre></td></tr></table></figure>\n<h1 id=\"给api加上超级链接\"><a href=\"#给api加上超级链接\" class=\"headerlink\" title=\"给api加上超级链接\"></a>给api加上超级链接</h1><h2 id=\"修改模块的序列化类\"><a href=\"#修改模块的序列化类\" class=\"headerlink\" title=\"修改模块的序列化类\"></a>修改模块的序列化类</h2><p>在序列化的类上继承 <code>HyperlinkedModelSerializer</code>,并使用<code>HyperlinkedRelatedField</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class=\"line\">    snippets = serializers.HyperlinkedRelatedField(many=<span class=\"keyword\">True</span>, view_name=<span class=\"string\">'snippet-detail'</span>, read_only=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'url'</span>, <span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'snippets'</span>)</div></pre></td></tr></table></figure>\n<p><strong>需要在 url 配置中添加 name 属性</strong></p>\n<h2 id=\"列表页面的分页配置\"><a href=\"#列表页面的分页配置\" class=\"headerlink\" title=\"列表页面的分页配置\"></a>列表页面的分页配置</h2><p>在项目的<code>setting.py</code>文件中添加下面的属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">        <span class=\"string\">'PAGE_SIZE'</span>: <span class=\"number\">10</span></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"viewset-和-router\"><a href=\"#viewset-和-router\" class=\"headerlink\" title=\"viewset 和 router\"></a>viewset 和 router</h1><h2 id=\"终极抽象-view-类-viewset\"><a href=\"#终极抽象-view-类-viewset\" class=\"headerlink\" title=\"终极抽象 view 类,viewset\"></a>终极抽象 view 类,viewset</h2><p>和单独的 <code>view</code> 不同的是,<code>viewset</code>抽象了一般的<code>list</code>和<code>detail</code>方法(list\\create\\retrieve\\update\\destroy)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.decorators <span class=\"keyword\">import</span> detail_route</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    This viewset automatically provides `list`, `create`, `retrieve`,</div><div class=\"line\">    `update` <span class=\"keyword\">and</span> `destroy` actions.</div><div class=\"line\"></div><div class=\"line\">    Additionally we also provide an extra `highlight` action.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div><div class=\"line\">    permission_classes = (permissions.IsAuthenticatedOrReadOnly,</div><div class=\"line\">    IsOwnerOrReadOnly,)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">highlight</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        snippet = self.get_object()</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(snippet.highlighted)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">perform_create</span><span class=\"params\">(self, serializer)</span>:</span></div><div class=\"line\">        serializer.save(owner=self.request.user)<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"抽象的-router\"><a href=\"#抽象的-router\" class=\"headerlink\" title=\"抽象的 router\"></a>抽象的 router</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.routers <span class=\"keyword\">import</span> DefaultRouter</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create a router and register our viewsets with it.</span></div><div class=\"line\">router = DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'snippets'</span>, views.SnippetViewSet)</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>, views.UserViewSet)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The API URLs are now determined automatically by the router.</span></div><div class=\"line\"><span class=\"comment\"># Additionally, we include the login URLs for the browsable API.</span></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(router.urls)),</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>))</div><div class=\"line\">        ]</div></pre></td></tr></table></figure>\n<h1 id=\"添加-schema\"><a href=\"#添加-schema\" class=\"headerlink\" title=\"添加 schema\"></a>添加 schema</h1><p>安装<code>coreapi</code><br><code>pip install coreapi</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.schemas <span class=\"keyword\">import</span> get_schema_view</div><div class=\"line\"></div><div class=\"line\">schema_view = get_schema_view(title=<span class=\"string\">'Pastebin API'</span>)</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">'^schema/$'</span>, schema_view),</div><div class=\"line\">        ...</div><div class=\"line\">        ]</div></pre></td></tr></table></figure></p>\n<h1 id=\"官方示例项目地址\"><a href=\"#官方示例项目地址\" class=\"headerlink\" title=\"官方示例项目地址\"></a>官方示例项目地址</h1><p>github:<a href=\"https://github.com/tomchristie/rest-framework-tutorial\" target=\"_blank\" rel=\"external\">https://github.com/tomchristie/rest-framework-tutorial</a></p>\n<p>demo  :<a href=\"http://restframework.herokuapp.com/snippets/\" target=\"_blank\" rel=\"external\">http://restframework.herokuapp.com/snippets/</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Serialization-序列化\"><a href=\"#Serialization-序列化\" class=\"headerlink\" title=\"Serialization 序列化\"></a>Serialization 序列化</h1><p>创建专门的序列化的 class 可以帮助 model 序列化<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = Snippet</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'title'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'linenos'</span>, <span class=\"string\">'language'</span>, <span class=\"string\">'style'</span>)</div></pre></td></tr></table></figure></p>\n<p>也可以自己创建序列化的函数,但是官方提供了modelserializer供我们继承</p>\n<h1 id=\"request-response-对象\"><a href=\"#request-response-对象\" class=\"headerlink\" title=\"request,response 对象\"></a>request,response 对象</h1><p>rest 框架重新封装了这2个对象.</p>\n<h2 id=\"request\"><a href=\"#request\" class=\"headerlink\" title=\"request\"></a>request</h2><p><code>request.post</code>可以得到客户端 post 的数据<br><code>request.data</code>则可以处理 post\\put\\patch 等方法的数据(推荐使用data)</p>\n<h2 id=\"response\"><a href=\"#response\" class=\"headerlink\" title=\"response\"></a>response</h2><p><code>response</code>  对象是 <code>TemplateResponse</code>类型,它可以根据内容来决定返回给客户端的数据格式(比如:html 或者json)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> format_suftrom django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.snippet_list),</div><div class=\"line\">        url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)$'</span>, views.snippet_detail),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<p>当客户端是浏览器的时候,就返回html代码,默认返回该格式<br>当客户端指定<code>endpoint</code>的时候就返回相应的格式.<br><code>http://127.0.0.1/user.json</code> 就返回 json<br><code>http://127.0.0.1/user.api</code> 就返回 html<br>客户端也可以在 <code>httpheader</code> 里面指定<code>accept</code>内容,比如<code>appication/json</code> <code>text/html</code></p>","more":"<h1 id=\"使用-classview\"><a href=\"#使用-classview\" class=\"headerlink\" title=\"使用 classview\"></a>使用 classview</h1><p>和<code>django</code>一样,这个框架也有封装好的<code>classview</code>,具体的方法如下:<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> Http404</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetList</span><span class=\"params\">(APIView)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    List all snippets, <span class=\"keyword\">or</span> create a new snippet.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></div><div class=\"line\">        snippets = Snippet.objects.all()</div><div class=\"line\">        serializer = SnippetSerializer(snippets, many=<span class=\"keyword\">True</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.data)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, format=None)</span>:</span></div><div class=\"line\">        serializer = SnippetSerializer(data=request.data)</div><div class=\"line\">        <span class=\"keyword\">if</span> serializer.is_valid():</div><div class=\"line\">            serializer.save()</div><div class=\"line\">            <span class=\"keyword\">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)<span class=\"string\">\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"还有高级的混合类\"><a href=\"#还有高级的混合类\" class=\"headerlink\" title=\"还有高级的混合类\"></a>还有高级的混合类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> mixins</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> generics</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetList</span><span class=\"params\">(mixins.ListModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    mixins.CreateModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    generics.GenericAPIView)</span>:</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.list(request, *args, **kwargs)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">post</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">return</span> self.create(request, *args, **kwargs)</div></pre></td></tr></table></figure>\n<p>抽象了常见的<code>list\\create</code>等方法</p>\n<h2 id=\"最高级的classbase类\"><a href=\"#最高级的classbase类\" class=\"headerlink\" title=\"最高级的classbase类\"></a>最高级的classbase类</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> snippets.models <span class=\"keyword\">import</span> Snippet</div><div class=\"line\"><span class=\"keyword\">from</span> snippets.serializers <span class=\"keyword\">import</span> SnippetSerializer</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> generics</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetList</span><span class=\"params\">(generics.ListCreateAPIView)</span>:</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetDetail</span><span class=\"params\">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div></pre></td></tr></table></figure>\n<p>使用这个高级的<code>view</code>类,两行代码就完成了 <code>get\\put\\delete</code>方法,全都浓缩了.</p>\n<h2 id=\"使用基于类的-url-配置\"><a href=\"#使用基于类的-url-配置\" class=\"headerlink\" title=\"使用基于类的 url 配置\"></a>使用基于类的 url 配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.urlpatterns <span class=\"keyword\">import</span> format_suffix_patterns</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/$'</span>, views.SnippetList.as_view()),</div><div class=\"line\">    url(<span class=\"string\">r'^snippets/(?P&lt;pk&gt;[0-9]+)/$'</span>, views.SnippetDetail.as_view()),</div><div class=\"line\">        ]</div><div class=\"line\"></div><div class=\"line\">urlpatterns = format_suffix_patterns(urlpatterns)</div></pre></td></tr></table></figure>\n<h1 id=\"认证和权限控制\"><a href=\"#认证和权限控制\" class=\"headerlink\" title=\"认证和权限控制\"></a>认证和权限控制</h1><h2 id=\"对model进行权限控制的时候-需要在model加上django的用户外键\"><a href=\"#对model进行权限控制的时候-需要在model加上django的用户外键\" class=\"headerlink\" title=\"对model进行权限控制的时候,需要在model加上django的用户外键\"></a>对<code>model</code>进行权限控制的时候,需要在<code>model</code>加上<code>django</code>的用户外键</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">owner = models.ForeignKey(<span class=\"string\">'auth.User'</span>, related_name=<span class=\"string\">'snippets'</span>, on_delete=models.CASCADE)</div></pre></td></tr></table></figure>\n<p>外键也需要提供默认值,键值是用户<code>id</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">owner = models.ForeignKey(<span class=\"string\">'auth.User'</span>, related_name=<span class=\"string\">'snippets'</span>, on_delete=models.CASCADE,defaut=key)</div></pre></td></tr></table></figure></p>\n<p>访问用户的时候可以看到属于用户的对象信息需要<br>添加用户的序列号文件</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></div><div class=\"line\">    snippets = serializers.PrimaryKeyRelatedField(many=<span class=\"keyword\">True</span>, queryset=Snippet.objects.all())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'snippets'</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"关联用户和模块-perform-create\"><a href=\"#关联用户和模块-perform-create\" class=\"headerlink\" title=\"关联用户和模块 perform_create\"></a>关联用户和模块 perform_create</h2><p>在对应的<code>model</code>的<code>view</code>类中,添加<code>perform_create</code>方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">perform_create</span><span class=\"params\">(self, serializer)</span>:</span></div><div class=\"line\">    serializer.save(owner=self.request.user)</div></pre></td></tr></table></figure></p>\n<h2 id=\"在model的序列化类中添加-用户的信息\"><a href=\"#在model的序列化类中添加-用户的信息\" class=\"headerlink\" title=\"在model的序列化类中添加 用户的信息\"></a>在model的序列化类中添加 用户的信息</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">owner = serializers.ReadOnlyField(source=<span class=\"string\">'owner.username'</span>)</div></pre></td></tr></table></figure>\n<p><code>source</code>可以指定需要输出的属性</p>\n<h2 id=\"基本的权限控制\"><a href=\"#基本的权限控制\" class=\"headerlink\" title=\"基本的权限控制\"></a>基本的权限控制</h2><p>从框架中导入默认的权限控制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> permissions</div></pre></td></tr></table></figure></p>\n<p>在对应的view中添加该属性即可实现基本的权限控制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">permission_classes = (permissions.IsAuthenticatedOrReadOnly,)</div></pre></td></tr></table></figure></p>\n<h2 id=\"定制的权限控制\"><a href=\"#定制的权限控制\" class=\"headerlink\" title=\"定制的权限控制\"></a>定制的权限控制</h2><p>可以自建一个权限控制的文件,用来控制<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> permissions</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IsOwnerOrReadOnly</span><span class=\"params\">(permissions.BasePermission)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    Custom permission to only allow owners of an object to edit it.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">has_object_permission</span><span class=\"params\">(self, request, view, obj)</span>:</span></div><div class=\"line\">        <span class=\"string\">\"\"</span></div><div class=\"line\">        Read permissions are allowed to any request,</div><div class=\"line\">        so we<span class=\"string\">'ll always allow GET, HEAD or OPTIONS requests.</span></div><div class=\"line\"><span class=\"string\">        \"\"</span></div><div class=\"line\"><span class=\"string\">        if request.method in permissions.SAFE_METHODS:</span></div><div class=\"line\"><span class=\"string\">            return True</span></div><div class=\"line\"><span class=\"string\"></span></div><div class=\"line\"><span class=\"string\">        return obj.owner == request.user`</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">permission_classes = (permissions.IsAuthenticatedOrReadOnly,</div><div class=\"line\">                      IsOwnerOrReadOnly,)</div></pre></td></tr></table></figure>\n<h1 id=\"给api加上超级链接\"><a href=\"#给api加上超级链接\" class=\"headerlink\" title=\"给api加上超级链接\"></a>给api加上超级链接</h1><h2 id=\"修改模块的序列化类\"><a href=\"#修改模块的序列化类\" class=\"headerlink\" title=\"修改模块的序列化类\"></a>修改模块的序列化类</h2><p>在序列化的类上继承 <code>HyperlinkedModelSerializer</code>,并使用<code>HyperlinkedRelatedField</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></div><div class=\"line\">    snippets = serializers.HyperlinkedRelatedField(many=<span class=\"keyword\">True</span>, view_name=<span class=\"string\">'snippet-detail'</span>, read_only=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></div><div class=\"line\">        model = User</div><div class=\"line\">        fields = (<span class=\"string\">'url'</span>, <span class=\"string\">'id'</span>, <span class=\"string\">'username'</span>, <span class=\"string\">'snippets'</span>)</div></pre></td></tr></table></figure>\n<p><strong>需要在 url 配置中添加 name 属性</strong></p>\n<h2 id=\"列表页面的分页配置\"><a href=\"#列表页面的分页配置\" class=\"headerlink\" title=\"列表页面的分页配置\"></a>列表页面的分页配置</h2><p>在项目的<code>setting.py</code>文件中添加下面的属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">REST_FRAMEWORK = &#123;</div><div class=\"line\">        <span class=\"string\">'PAGE_SIZE'</span>: <span class=\"number\">10</span></div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"viewset-和-router\"><a href=\"#viewset-和-router\" class=\"headerlink\" title=\"viewset 和 router\"></a>viewset 和 router</h1><h2 id=\"终极抽象-view-类-viewset\"><a href=\"#终极抽象-view-类-viewset\" class=\"headerlink\" title=\"终极抽象 view 类,viewset\"></a>终极抽象 view 类,viewset</h2><p>和单独的 <code>view</code> 不同的是,<code>viewset</code>抽象了一般的<code>list</code>和<code>detail</code>方法(list\\create\\retrieve\\update\\destroy)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.decorators <span class=\"keyword\">import</span> detail_route</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SnippetViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    This viewset automatically provides `list`, `create`, `retrieve`,</div><div class=\"line\">    `update` <span class=\"keyword\">and</span> `destroy` actions.</div><div class=\"line\"></div><div class=\"line\">    Additionally we also provide an extra `highlight` action.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    queryset = Snippet.objects.all()</div><div class=\"line\">    serializer_class = SnippetSerializer</div><div class=\"line\">    permission_classes = (permissions.IsAuthenticatedOrReadOnly,</div><div class=\"line\">    IsOwnerOrReadOnly,)</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @detail_route(renderer_classes=[renderers.StaticHTMLRenderer])</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">highlight</span><span class=\"params\">(self, request, *args, **kwargs)</span>:</span></div><div class=\"line\">        snippet = self.get_object()</div><div class=\"line\">        <span class=\"keyword\">return</span> Response(snippet.highlighted)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">perform_create</span><span class=\"params\">(self, serializer)</span>:</span></div><div class=\"line\">        serializer.save(owner=self.request.user)<span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"抽象的-router\"><a href=\"#抽象的-router\" class=\"headerlink\" title=\"抽象的 router\"></a>抽象的 router</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url, include</div><div class=\"line\"><span class=\"keyword\">from</span> snippets <span class=\"keyword\">import</span> views</div><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.routers <span class=\"keyword\">import</span> DefaultRouter</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Create a router and register our viewsets with it.</span></div><div class=\"line\">router = DefaultRouter()</div><div class=\"line\">router.register(<span class=\"string\">r'snippets'</span>, views.SnippetViewSet)</div><div class=\"line\">router.register(<span class=\"string\">r'users'</span>, views.UserViewSet)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># The API URLs are now determined automatically by the router.</span></div><div class=\"line\"><span class=\"comment\"># Additionally, we include the login URLs for the browsable API.</span></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">r'^'</span>, include(router.urls)),</div><div class=\"line\">    url(<span class=\"string\">r'^api-auth/'</span>, include(<span class=\"string\">'rest_framework.urls'</span>, namespace=<span class=\"string\">'rest_framework'</span>))</div><div class=\"line\">        ]</div></pre></td></tr></table></figure>\n<h1 id=\"添加-schema\"><a href=\"#添加-schema\" class=\"headerlink\" title=\"添加 schema\"></a>添加 schema</h1><p>安装<code>coreapi</code><br><code>pip install coreapi</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> rest_framework.schemas <span class=\"keyword\">import</span> get_schema_view</div><div class=\"line\"></div><div class=\"line\">schema_view = get_schema_view(title=<span class=\"string\">'Pastebin API'</span>)</div><div class=\"line\"></div><div class=\"line\">urlpatterns = [</div><div class=\"line\">    url(<span class=\"string\">'^schema/$'</span>, schema_view),</div><div class=\"line\">        ...</div><div class=\"line\">        ]</div></pre></td></tr></table></figure></p>\n<h1 id=\"官方示例项目地址\"><a href=\"#官方示例项目地址\" class=\"headerlink\" title=\"官方示例项目地址\"></a>官方示例项目地址</h1><p>github:<a href=\"https://github.com/tomchristie/rest-framework-tutorial\" target=\"_blank\" rel=\"external\">https://github.com/tomchristie/rest-framework-tutorial</a></p>\n<p>demo  :<a href=\"http://restframework.herokuapp.com/snippets/\" target=\"_blank\" rel=\"external\">http://restframework.herokuapp.com/snippets/</a></p>"},{"title":"django-restful 的 viewset","date":"2017-01-21T02:28:35.000Z","_content":"\n# ViewSet\n是框架的基类,没有提供`list` `create`等方法,继承之后可以自定义每个方法.\n\n```python\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\n    Example empty viewset demonstrating the standard\n    actions that will be handled by a router class.\n\n    If you're using format suffixes, make sure to also include\n    the `format=None` keyword argument for each action.\n    \"\"\n\n    def list(self, request):\n        pass\n\n    def create(self, request):\n        pass\n\n    def retrieve(self, request, pk=None):\n        pass\n\n    def update(self, request, pk=None):\n        pass\n\n    def partial_update(self, request, pk=None):\n        pass\n\n    def destroy(self, request, pk=None):\n        pass\"\n```\n\n# ModelViewSet\n模板基类,提供了所有框架有的方法\n\n```python\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\n    A viewset that provides the standard actions\n    \"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    @detail_route(methods=['post'])\n    def set_password(self, request, pk=None):\n        pass\n\n    @list_route()\n    def recent_users(self, request):\n        pass\n```\n如果要定制某些方法,可以使用修饰符,比如`@list_route()`,还可以接收其他的参数\n\n```python\n@detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])\ndef set_password(self, request, pk=None):\n    ...\n```\n使用定制方法后的`url`如下\n```\n^users/{pk}/unset_password/$\n```\n# ReadOnlyModelViewSet\n提供常见的`get` `list`方法\n# 定制自己的基类\n混合`Mixin`\n```python\nclass CreateListRetrieveViewSet(mixins.CreateModelMixin,\n    mixins.ListModelMixin,\n    mixins.RetrieveModelMixin,\n    viewsets.GenericViewSet):\n    \"\"\n    A viewset that provides `retrieve`, `create`, and `list` actions.\n\n    To use it, override the class and set the `.queryset` and\n    `.serializer_class` attributes.\n    \"\"\n    pass\n```\n","source":"_posts/rest-viewset.md","raw":"---\ntitle: django-restful 的 viewset\ndate: 2017-01-21 10:28:35\ntags:\n- python\n- django\n- restful\n---\n\n# ViewSet\n是框架的基类,没有提供`list` `create`等方法,继承之后可以自定义每个方法.\n\n```python\nclass UserViewSet(viewsets.ViewSet):\n    \"\"\n    Example empty viewset demonstrating the standard\n    actions that will be handled by a router class.\n\n    If you're using format suffixes, make sure to also include\n    the `format=None` keyword argument for each action.\n    \"\"\n\n    def list(self, request):\n        pass\n\n    def create(self, request):\n        pass\n\n    def retrieve(self, request, pk=None):\n        pass\n\n    def update(self, request, pk=None):\n        pass\n\n    def partial_update(self, request, pk=None):\n        pass\n\n    def destroy(self, request, pk=None):\n        pass\"\n```\n\n# ModelViewSet\n模板基类,提供了所有框架有的方法\n\n```python\nclass UserViewSet(viewsets.ModelViewSet):\n    \"\"\n    A viewset that provides the standard actions\n    \"\"\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n\n    @detail_route(methods=['post'])\n    def set_password(self, request, pk=None):\n        pass\n\n    @list_route()\n    def recent_users(self, request):\n        pass\n```\n如果要定制某些方法,可以使用修饰符,比如`@list_route()`,还可以接收其他的参数\n\n```python\n@detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])\ndef set_password(self, request, pk=None):\n    ...\n```\n使用定制方法后的`url`如下\n```\n^users/{pk}/unset_password/$\n```\n# ReadOnlyModelViewSet\n提供常见的`get` `list`方法\n# 定制自己的基类\n混合`Mixin`\n```python\nclass CreateListRetrieveViewSet(mixins.CreateModelMixin,\n    mixins.ListModelMixin,\n    mixins.RetrieveModelMixin,\n    viewsets.GenericViewSet):\n    \"\"\n    A viewset that provides `retrieve`, `create`, and `list` actions.\n\n    To use it, override the class and set the `.queryset` and\n    `.serializer_class` attributes.\n    \"\"\n    pass\n```\n","slug":"rest-viewset","published":1,"updated":"2017-08-14T09:18:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6bzqyek0007853ewm8aa4b3","content":"<h1 id=\"ViewSet\"><a href=\"#ViewSet\" class=\"headerlink\" title=\"ViewSet\"></a>ViewSet</h1><p>是框架的基类,没有提供<code>list</code> <code>create</code>等方法,继承之后可以自定义每个方法.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewSet</span><span class=\"params\">(viewsets.ViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    Example empty viewset demonstrating the standard</div><div class=\"line\">    actions that will be handled by a router <span class=\"class\"><span class=\"keyword\">class</span>.</span></div><div class=\"line\"><span class=\"class\"></span></div><div class=\"line\">    If you're using format suffixes, make sure to also include</div><div class=\"line\">    the `format=<span class=\"keyword\">None</span>` keyword argument <span class=\"keyword\">for</span> each action.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">retrieve</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partial_update</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">destroy</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span><span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"ModelViewSet\"><a href=\"#ModelViewSet\" class=\"headerlink\" title=\"ModelViewSet\"></a>ModelViewSet</h1><p>模板基类,提供了所有框架有的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    A viewset that provides the standard actions</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    queryset = User.objects.all()</div><div class=\"line\">    serializer_class = UserSerializer</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @detail_route(methods=['post'])</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_password</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @list_route()</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recent_users</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<p>如果要定制某些方法,可以使用修饰符,比如<code>@list_route()</code>,还可以接收其他的参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_password</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n<p>使用定制方法后的<code>url</code>如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^users/&#123;pk&#125;/unset_password/$</div></pre></td></tr></table></figure></p>\n<h1 id=\"ReadOnlyModelViewSet\"><a href=\"#ReadOnlyModelViewSet\" class=\"headerlink\" title=\"ReadOnlyModelViewSet\"></a>ReadOnlyModelViewSet</h1><p>提供常见的<code>get</code> <code>list</code>方法</p>\n<h1 id=\"定制自己的基类\"><a href=\"#定制自己的基类\" class=\"headerlink\" title=\"定制自己的基类\"></a>定制自己的基类</h1><p>混合<code>Mixin</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateListRetrieveViewSet</span><span class=\"params\">(mixins.CreateModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    mixins.ListModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    mixins.RetrieveModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    viewsets.GenericViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    A viewset that provides `retrieve`, `create`, <span class=\"keyword\">and</span> `list` actions.</div><div class=\"line\"></div><div class=\"line\">    To use it, override the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">and</span> <span class=\"title\">set</span> <span class=\"title\">the</span> `.<span class=\"title\">queryset</span>` <span class=\"title\">and</span></span></div><div class=\"line\"><span class=\"class\">    `.<span class=\"title\">serializer_class</span>` <span class=\"title\">attributes</span>.</span></div><div class=\"line\"><span class=\"class\">    \"\"</span></div><div class=\"line\"><span class=\"class\">    <span class=\"title\">pass</span></span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"ViewSet\"><a href=\"#ViewSet\" class=\"headerlink\" title=\"ViewSet\"></a>ViewSet</h1><p>是框架的基类,没有提供<code>list</code> <code>create</code>等方法,继承之后可以自定义每个方法.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewSet</span><span class=\"params\">(viewsets.ViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    Example empty viewset demonstrating the standard</div><div class=\"line\">    actions that will be handled by a router <span class=\"class\"><span class=\"keyword\">class</span>.</span></div><div class=\"line\"><span class=\"class\"></span></div><div class=\"line\">    If you're using format suffixes, make sure to also include</div><div class=\"line\">    the `format=<span class=\"keyword\">None</span>` keyword argument <span class=\"keyword\">for</span> each action.</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">list</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">retrieve</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">update</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">partial_update</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">destroy</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span><span class=\"string\">\"</span></div></pre></td></tr></table></figure>\n<h1 id=\"ModelViewSet\"><a href=\"#ModelViewSet\" class=\"headerlink\" title=\"ModelViewSet\"></a>ModelViewSet</h1><p>模板基类,提供了所有框架有的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    A viewset that provides the standard actions</div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    queryset = User.objects.all()</div><div class=\"line\">    serializer_class = UserSerializer</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @detail_route(methods=['post'])</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_password</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">    @list_route()</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">recent_users</span><span class=\"params\">(self, request)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">pass</span></div></pre></td></tr></table></figure>\n<p>如果要定制某些方法,可以使用修饰符,比如<code>@list_route()</code>,还可以接收其他的参数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@detail_route(methods=['post'], permission_classes=[IsAdminOrIsSelf])</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_password</span><span class=\"params\">(self, request, pk=None)</span>:</span></div><div class=\"line\">    ...</div></pre></td></tr></table></figure>\n<p>使用定制方法后的<code>url</code>如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">^users/&#123;pk&#125;/unset_password/$</div></pre></td></tr></table></figure></p>\n<h1 id=\"ReadOnlyModelViewSet\"><a href=\"#ReadOnlyModelViewSet\" class=\"headerlink\" title=\"ReadOnlyModelViewSet\"></a>ReadOnlyModelViewSet</h1><p>提供常见的<code>get</code> <code>list</code>方法</p>\n<h1 id=\"定制自己的基类\"><a href=\"#定制自己的基类\" class=\"headerlink\" title=\"定制自己的基类\"></a>定制自己的基类</h1><p>混合<code>Mixin</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreateListRetrieveViewSet</span><span class=\"params\">(mixins.CreateModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    mixins.ListModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    mixins.RetrieveModelMixin,</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"params\">    viewsets.GenericViewSet)</span>:</span></div><div class=\"line\">    <span class=\"string\">\"\"</span></div><div class=\"line\">    A viewset that provides `retrieve`, `create`, <span class=\"keyword\">and</span> `list` actions.</div><div class=\"line\"></div><div class=\"line\">    To use it, override the <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">and</span> <span class=\"title\">set</span> <span class=\"title\">the</span> `.<span class=\"title\">queryset</span>` <span class=\"title\">and</span></span></div><div class=\"line\"><span class=\"class\">    `.<span class=\"title\">serializer_class</span>` <span class=\"title\">attributes</span>.</span></div><div class=\"line\"><span class=\"class\">    \"\"</span></div><div class=\"line\"><span class=\"class\">    <span class=\"title\">pass</span></span></div></pre></td></tr></table></figure></p>\n"},{"title":"setting,开发的基本设置","date":"2017-01-17T03:19:35.000Z","_content":"\n## setting,开发的基本设置\n\n`ALLOWED_HOSTS = [\"*\"]`\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME':'moocdai',\n        'USER':'django',\n        'PASSWORD':'xxxxx',\n        'HOST':'10.10.10.3',\n    }\n}\n```\n`TIME_ZONE = 'Asia/Shanghai'`\n\n添加app的另外一种方法\n```\nINSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n##  render,取代原来的template方法\nshortcut 是django中一些有用的便捷方法\n```python\nfrom django.shortcuts import render\ndef index(request):\n    latest_question_list=Question.objects.order_by('-pub_date')[:5]\n    context={\n\n        'latest_question_list':latest_question_list\n    }\n    return render(request,'polls/index.html',context)\n```\n## get_object_or_404,连接视图和模型,官方推荐?\n```python\ndef detail(request,question_id):\n    question = get_object_or_404(Question,pk=question_id)\n    return render(request,\"polls/detail.html\",{'question':question})\n```\n## get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法\n\n## 神奇的外键取值\n```html\n<h1>{{ question.question_text }}</h1>\n<ul>\n  {% for choice in question.choice_set.all %}\n  #这里question是choice的外键,通过question可以取得关联的choice的集合\n  <li>{{ choice.choice_text }}</li>\n  {% endfor %}\n</ul>\n```\n","source":"_posts/setting-of-django.md","raw":"---\ntitle: setting,开发的基本设置\ndate: 2017-01-17 11:19:35\ntags:\n- django\n- python\n---\n\n## setting,开发的基本设置\n\n`ALLOWED_HOSTS = [\"*\"]`\n```\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME':'moocdai',\n        'USER':'django',\n        'PASSWORD':'xxxxx',\n        'HOST':'10.10.10.3',\n    }\n}\n```\n`TIME_ZONE = 'Asia/Shanghai'`\n\n添加app的另外一种方法\n```\nINSTALLED_APPS = [\n    'polls.apps.PollsConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n```\n##  render,取代原来的template方法\nshortcut 是django中一些有用的便捷方法\n```python\nfrom django.shortcuts import render\ndef index(request):\n    latest_question_list=Question.objects.order_by('-pub_date')[:5]\n    context={\n\n        'latest_question_list':latest_question_list\n    }\n    return render(request,'polls/index.html',context)\n```\n## get_object_or_404,连接视图和模型,官方推荐?\n```python\ndef detail(request,question_id):\n    question = get_object_or_404(Question,pk=question_id)\n    return render(request,\"polls/detail.html\",{'question':question})\n```\n## get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法\n\n## 神奇的外键取值\n```html\n<h1>{{ question.question_text }}</h1>\n<ul>\n  {% for choice in question.choice_set.all %}\n  #这里question是choice的外键,通过question可以取得关联的choice的集合\n  <li>{{ choice.choice_text }}</li>\n  {% endfor %}\n</ul>\n```\n","slug":"setting-of-django","published":1,"updated":"2017-08-14T09:18:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6bzqyep0009853e3t6vab4q","content":"<h2 id=\"setting-开发的基本设置\"><a href=\"#setting-开发的基本设置\" class=\"headerlink\" title=\"setting,开发的基本设置\"></a>setting,开发的基本设置</h2><p><code>ALLOWED_HOSTS = [&quot;*&quot;]</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DATABASES = &#123;</div><div class=\"line\">    &apos;default&apos;: &#123;</div><div class=\"line\">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class=\"line\">        &apos;NAME&apos;:&apos;moocdai&apos;,</div><div class=\"line\">        &apos;USER&apos;:&apos;django&apos;,</div><div class=\"line\">        &apos;PASSWORD&apos;:&apos;xxxxx&apos;,</div><div class=\"line\">        &apos;HOST&apos;:&apos;10.10.10.3&apos;,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>TIME_ZONE = &#39;Asia/Shanghai&#39;</code></p>\n<p>添加app的另外一种方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = [</div><div class=\"line\">    &apos;polls.apps.PollsConfig&apos;,</div><div class=\"line\">    &apos;django.contrib.admin&apos;,</div><div class=\"line\">    &apos;django.contrib.auth&apos;,</div><div class=\"line\">    &apos;django.contrib.contenttypes&apos;,</div><div class=\"line\">    &apos;django.contrib.sessions&apos;,</div><div class=\"line\">    &apos;django.contrib.messages&apos;,</div><div class=\"line\">    &apos;django.contrib.staticfiles&apos;,</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h2 id=\"render-取代原来的template方法\"><a href=\"#render-取代原来的template方法\" class=\"headerlink\" title=\"render,取代原来的template方法\"></a>render,取代原来的template方法</h2><p>shortcut 是django中一些有用的便捷方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    latest_question_list=Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</div><div class=\"line\">    context=&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"string\">'latest_question_list'</span>:latest_question_list</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">'polls/index.html'</span>,context)</div></pre></td></tr></table></figure></p>\n<h2 id=\"get-object-or-404-连接视图和模型-官方推荐\"><a href=\"#get-object-or-404-连接视图和模型-官方推荐\" class=\"headerlink\" title=\"get_object_or_404,连接视图和模型,官方推荐?\"></a>get_object_or_404,连接视图和模型,官方推荐?</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request,question_id)</span>:</span></div><div class=\"line\">    question = get_object_or_404(Question,pk=question_id)</div><div class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">\"polls/detail.html\"</span>,&#123;<span class=\"string\">'question'</span>:question&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"get-list-or-404-上面的兄弟方法-将模型的get-方法变成filter-方法\"><a href=\"#get-list-or-404-上面的兄弟方法-将模型的get-方法变成filter-方法\" class=\"headerlink\" title=\"get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法\"></a>get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法</h2><h2 id=\"神奇的外键取值\"><a href=\"#神奇的外键取值\" class=\"headerlink\" title=\"神奇的外键取值\"></a>神奇的外键取值</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  &#123;% for choice in question.choice_set.all %&#125;</div><div class=\"line\">  #这里question是choice的外键,通过question可以取得关联的choice的集合</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  &#123;% endfor %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"setting-开发的基本设置\"><a href=\"#setting-开发的基本设置\" class=\"headerlink\" title=\"setting,开发的基本设置\"></a>setting,开发的基本设置</h2><p><code>ALLOWED_HOSTS = [&quot;*&quot;]</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">DATABASES = &#123;</div><div class=\"line\">    &apos;default&apos;: &#123;</div><div class=\"line\">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</div><div class=\"line\">        &apos;NAME&apos;:&apos;moocdai&apos;,</div><div class=\"line\">        &apos;USER&apos;:&apos;django&apos;,</div><div class=\"line\">        &apos;PASSWORD&apos;:&apos;xxxxx&apos;,</div><div class=\"line\">        &apos;HOST&apos;:&apos;10.10.10.3&apos;,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>TIME_ZONE = &#39;Asia/Shanghai&#39;</code></p>\n<p>添加app的另外一种方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">INSTALLED_APPS = [</div><div class=\"line\">    &apos;polls.apps.PollsConfig&apos;,</div><div class=\"line\">    &apos;django.contrib.admin&apos;,</div><div class=\"line\">    &apos;django.contrib.auth&apos;,</div><div class=\"line\">    &apos;django.contrib.contenttypes&apos;,</div><div class=\"line\">    &apos;django.contrib.sessions&apos;,</div><div class=\"line\">    &apos;django.contrib.messages&apos;,</div><div class=\"line\">    &apos;django.contrib.staticfiles&apos;,</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<h2 id=\"render-取代原来的template方法\"><a href=\"#render-取代原来的template方法\" class=\"headerlink\" title=\"render,取代原来的template方法\"></a>render,取代原来的template方法</h2><p>shortcut 是django中一些有用的便捷方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">(request)</span>:</span></div><div class=\"line\">    latest_question_list=Question.objects.order_by(<span class=\"string\">'-pub_date'</span>)[:<span class=\"number\">5</span>]</div><div class=\"line\">    context=&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"string\">'latest_question_list'</span>:latest_question_list</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">'polls/index.html'</span>,context)</div></pre></td></tr></table></figure></p>\n<h2 id=\"get-object-or-404-连接视图和模型-官方推荐\"><a href=\"#get-object-or-404-连接视图和模型-官方推荐\" class=\"headerlink\" title=\"get_object_or_404,连接视图和模型,官方推荐?\"></a>get_object_or_404,连接视图和模型,官方推荐?</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detail</span><span class=\"params\">(request,question_id)</span>:</span></div><div class=\"line\">    question = get_object_or_404(Question,pk=question_id)</div><div class=\"line\">    <span class=\"keyword\">return</span> render(request,<span class=\"string\">\"polls/detail.html\"</span>,&#123;<span class=\"string\">'question'</span>:question&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"get-list-or-404-上面的兄弟方法-将模型的get-方法变成filter-方法\"><a href=\"#get-list-or-404-上面的兄弟方法-将模型的get-方法变成filter-方法\" class=\"headerlink\" title=\"get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法\"></a>get_list_or_404 上面的兄弟方法,将模型的get()方法变成filter()方法</h2><h2 id=\"神奇的外键取值\"><a href=\"#神奇的外键取值\" class=\"headerlink\" title=\"神奇的外键取值\"></a>神奇的外键取值</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">  &#123;% for choice in question.choice_set.all %&#125;</div><div class=\"line\">  #这里question是choice的外键,通过question可以取得关联的choice的集合</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">  &#123;% endfor %&#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"todo 列表","date":"2017-01-23T07:45:02.000Z","_content":"# 待学习的列表\n\n- Django-restful 的authorize 和 permission\n- Scrapy....\n","source":"_posts/todo.md","raw":"---\ntitle: todo 列表\ndate: 2017-01-23 15:45:02\ntags:\n- todo\n---\n# 待学习的列表\n\n- Django-restful 的authorize 和 permission\n- Scrapy....\n","slug":"todo","published":1,"updated":"2017-08-14T09:18:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj6bzqyer000a853et4kxzb6k","content":"<h1 id=\"待学习的列表\"><a href=\"#待学习的列表\" class=\"headerlink\" title=\"待学习的列表\"></a>待学习的列表</h1><ul>\n<li>Django-restful 的authorize 和 permission</li>\n<li>Scrapy….</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"待学习的列表\"><a href=\"#待学习的列表\" class=\"headerlink\" title=\"待学习的列表\"></a>待学习的列表</h1><ul>\n<li>Django-restful 的authorize 和 permission</li>\n<li>Scrapy….</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj6bzqyep0009853e3t6vab4q","tag_id":"cj6bzqyen0008853eokjjw7qt","_id":"cj6bzqyeu000c853endizwbk3"},{"post_id":"cj6bzqyep0009853e3t6vab4q","tag_id":"cj6bzqyee0004853e8bp8iykn","_id":"cj6bzqyeu000d853eos8lxiu7"},{"post_id":"cj6bzqye70000853e8adr0qlh","tag_id":"cj6bzqyee0004853e8bp8iykn","_id":"cj6bzqyev000f853etpctc987"},{"post_id":"cj6bzqye70000853e8adr0qlh","tag_id":"cj6bzqyen0008853eokjjw7qt","_id":"cj6bzqyev000g853e9clocc4a"},{"post_id":"cj6bzqyeh0005853e7rdzcnmo","tag_id":"cj6bzqyen0008853eokjjw7qt","_id":"cj6bzqyew000i853esl1k6zlt"},{"post_id":"cj6bzqyeh0005853e7rdzcnmo","tag_id":"cj6bzqyee0004853e8bp8iykn","_id":"cj6bzqyew000j853en43u0gf2"},{"post_id":"cj6bzqyei0006853emcpaqaa8","tag_id":"cj6bzqyen0008853eokjjw7qt","_id":"cj6bzqyex000m853enxfvad7j"},{"post_id":"cj6bzqyei0006853emcpaqaa8","tag_id":"cj6bzqyew000k853e48au71hy","_id":"cj6bzqyex000n853ef88p5o0l"},{"post_id":"cj6bzqyei0006853emcpaqaa8","tag_id":"cj6bzqyee0004853e8bp8iykn","_id":"cj6bzqyey000p853ehal2106q"},{"post_id":"cj6bzqyek0007853ewm8aa4b3","tag_id":"cj6bzqyee0004853e8bp8iykn","_id":"cj6bzqyey000r853el2mtuka0"},{"post_id":"cj6bzqyek0007853ewm8aa4b3","tag_id":"cj6bzqyen0008853eokjjw7qt","_id":"cj6bzqyey000s853eni49x1nx"},{"post_id":"cj6bzqyek0007853ewm8aa4b3","tag_id":"cj6bzqyew000k853e48au71hy","_id":"cj6bzqyez000t853eomawa8d6"},{"post_id":"cj6bzqyer000a853et4kxzb6k","tag_id":"cj6bzqyey000q853erxexmr5g","_id":"cj6bzqyez000u853eun5w7vkw"}],"Tag":[{"name":"python","_id":"cj6bzqyee0004853e8bp8iykn"},{"name":"django","_id":"cj6bzqyen0008853eokjjw7qt"},{"name":"restful","_id":"cj6bzqyew000k853e48au71hy"},{"name":"todo","_id":"cj6bzqyey000q853erxexmr5g"}]}}